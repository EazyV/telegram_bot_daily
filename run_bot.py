# -*- coding: utf-8 -*-
from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext

from aiogram.utils import executor
import random
import json
from aiogram.dispatcher.filters import Text

from bot import keyboards
from bot.keyboards.buttons import create_keyboard_name_list
from bot.states import UpdateList

with open("tokens.json", "r") as read_file:
    tokens = json.load(read_file)
token = tokens["tokenTG"]

bot = Bot(token)
names_list = ["–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ö", "–°–∞–Ω–µ—á–∏–∫", "–ù–∞—Ç–∞—à–∞", "–û–∫—Å–∞–Ω–∞", "–¢–∞—Ç—å—è–Ω–∞", "–ù–∞—Å—Ç—è", "–õ–µ—Ä–∞", "–ò–≤–∞–Ω",
              "–°–æ–Ω—è", "–ò—Ä–µ–Ω", "–†–∏—Ñ–∞—Ç", "–°–µ—Ä–µ–∂–∞", "–í–ª–∞–¥", "–Æ–ª—è", "–ê–Ω—è", "–ö–∞—Ç—è –†",
              "–ù–∞—Ç–∞–ª–∏ –•—É—Ç–æ—Ä—Å–∫–∞—è", "–ö–∏—Ä–∏–ª–ª"]
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)


def get_random_wish():
    wishes = [
        "–ü—É—Å—Ç—å –≤–∞—à –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —É–ª—ã–±–∫–∞–º–∏ –∏ —Ä–∞–¥–æ—Å—Ç—å—é!",
        "–ñ–µ–ª–∞—é –≤–∞–º –Ω–∞—Å—ã—â–µ–Ω–Ω–æ–≥–æ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!",
        "–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç –≤–∞—à–µ–≥–æ –¥–Ω—è –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤–∞–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ.",
        "–ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –ø–æ–¥–∞—Ä–∏—Ç –≤–∞–º –º–æ—Ä–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.",
        "–ü—É—Å—Ç—å —Å–æ–ª–Ω—Ü–µ —Å–≤–µ—Ç–∏—Ç —è—Ä–∫–æ –≤ –≤–∞—à–µ–º —Å–µ—Ä–¥—Ü–µ –≤–µ—Å—å –¥–µ–Ω—å!",
        "–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–∏–≤–æ–¥–∏—Ç –≤–∞—Å –∫ —É—Å–ø–µ—Ö—É –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—é.",
        "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —É–ª—ã–±–∞—Ç—å—Å—è, –≤–µ–¥—å —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –¥–µ–Ω—å —è—Ä—á–µ!",
        "–ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç —Ç–∞–∫ –∂–µ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–º, –∫–∞–∫ –≤—ã!",
        "–ñ–µ–ª–∞—é –≤–∞–º –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ —Å—á–∞—Å—Ç—å—è —Å–µ–≥–æ–¥–Ω—è!",
        "–ü—É—Å—Ç—å –∫–∞–∂–¥–∞—è –º–∏–Ω—É—Ç–∞ –¥–Ω—è –ø—Ä–∏–Ω–µ—Å–µ—Ç –≤–∞–º —Ä–∞–¥–æ—Å—Ç—å –∏ —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ.",
        "–ü—É—Å—Ç—å –∫–∞–∂–¥–∞—è —Ç—É—á–∫–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã —É–≤–∏–¥–∏—Ç–µ, —Å–∫—Ä—ã–≤–∞–µ—Ç –≤ —Å–µ–±–µ –º–∞–ª–µ–Ω—å–∫–æ–µ —Å—á–∞—Å—Ç—å–µ.",
        "–ü–æ–∂–µ–ª–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: –ø—É—Å—Ç—å –≤–∞—à –∫–æ—Ñ–µ –±—É–¥–µ—Ç –≥–æ—Ä—è—á–∏–º, –∞ –ø—Ä–æ–±–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å!",
        "–ñ–µ–ª–∞—é –≤–∞–º, —á—Ç–æ–±—ã –≤–µ—Å—å –¥–µ–Ω—å –≤–∞—Å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–ª–∏ –∑–∞–±–∞–≤–Ω—ã–µ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –∏ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è.",
        "–ü—É—Å—Ç—å –≤–∞—à –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ–ª—å–∫–æ —è—Ä–∫–∏–º, —á—Ç–æ —Ä–∞–¥—É–≥–∞ –ø–æ–∑–∞–≤–∏–¥—É–µ—Ç!",
        "–ñ–µ–ª–∞—é –≤–∞–º —Å–µ–≥–æ–¥–Ω—è –æ—â—É—Ç–∏—Ç—å –≤–æ–ª—à–µ–±—Å—Ç–≤–æ –≤ —Å–∞–º—ã—Ö –æ–±—ã–¥–µ–Ω–Ω—ã—Ö –≤–µ—â–∞—Ö.",
        "–ü—É—Å—Ç—å –∫–∞–∂–¥–æ–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–µ—Ç –¥–ª—è –≤–∞—Å —Å—Ç—É–ø–µ–Ω—å–∫–æ–π –∫ –Ω–æ–≤—ã–º –≤–µ—Ä—à–∏–Ω–∞–º.",
        "–ñ–µ–ª–∞—é –≤–∞–º –Ω–∞–π—Ç–∏ –∫–ª–∞–¥ –≤ –º–æ—Ä–µ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥–æ–º—É –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—é.",
        "–ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–æ–π–¥–µ—Ç —Ç–∞–∫, —Å–ª–æ–≤–Ω–æ –≤—ã –≥–µ—Ä–æ–π –≤–∞—à–µ–π –ª—é–±–∏–º–æ–π –∫–Ω–∏–≥–∏ –∏–ª–∏ —Ñ–∏–ª—å–º–∞.",
        "–ñ–µ–ª–∞—é –≤–∞–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–∞–∫ —á–∏—Å—Ç—ã–π —Ö–æ–ª—Å—Ç, –≥–æ—Ç–æ–≤—ã–π –ø—Ä–∏–Ω—è—Ç—å –≤–∞—à—É —è—Ä–∫—É—é –ø–∞–ª–∏—Ç—Ä—É.",
        "–ü—É—Å—Ç—å –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º, —á—Ç–æ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –æ –∫–æ—Ç–æ—Ä—ã—Ö –¥–∞–∂–µ –Ω–µ –∑–∞–¥—É–º—ã–≤–∞–ª–∏—Å—å."
    ]

    return random.choice(wishes)


def get_random_smiley():
    smileys = ["üòä", "ü•∞", "üôÇ", "üòã", "üòá", "ü§©", "üòâ", "‚ù§Ô∏è", "üíï", "üíñ", "üíó", "üíò", "üíô", "üíö", "üíõ", "üíú"]

    return random.choice(smileys)


async def on_startup(_):
    print('Bot online')
    await bot.send_message("1454049968", "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")


@dp.message_handler(commands=['start'])
async def commands_start(message: types.message):
    await bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç,–≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É",
        reply_markup=keyboards.main_menu,
        parse_mode=types.ParseMode.MARKDOWN,
    )


@dp.message_handler(commands=['menu'])
async def commands_menu(message: types.message):
    await bot.send_message(
        message.chat.id,
        "–¢—ã –≤ –º–µ–Ω—é,–≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É",
        reply_markup=keyboards.main_menu,
        parse_mode=types.ParseMode.MARKDOWN,
    )


@dp.message_handler(Text(equals=["–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"], ignore_case=True))
async def update_list(message: types.message):
    await UpdateList.start.set()
    await bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–º—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
        reply_markup=create_keyboard_name_list(names_list),
        parse_mode=types.ParseMode.MARKDOWN,
    )


@dp.message_handler(Text(equals=["–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫"], ignore_case=True))
async def update_list(message: types.message):
    sp = list.copy(names_list)
    sp_random = [sp.pop(random.randrange(len(sp))) for _ in range(len(sp))]
    await bot.send_message(message.chat.id, f" {get_random_smiley()} \n ".join(sp_random))
    await bot.send_message(message.chat.id, get_random_wish(), reply_markup=keyboards.main_menu, )
    await bot.send_message(message.chat.id, get_random_smiley())


@dp.message_handler(state=UpdateList.start)
async def start_update_list(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        result = data

    if "names_list" in result:
        update_list = result["names_list"].copy()
        try:
            update_list.remove(message.text)
        except ValueError as error:
            print(error)
        async with state.proxy() as data:
            data["names_list"] = update_list
        await UpdateList.update.set()
        await bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É",
            reply_markup=keyboards.step_keyboard,
            parse_mode=types.ParseMode.MARKDOWN,
        )
    else:
        new_name_list = names_list.copy()
        try:
            new_name_list.remove(message.text)
        except ValueError as error:
            print(error)
        async with state.proxy() as data:
            data["names_list"] = new_name_list
        await UpdateList.update.set()
        await bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É",
            reply_markup=keyboards.step_keyboard,
            parse_mode=types.ParseMode.MARKDOWN,
        )


@dp.message_handler(state=UpdateList.update)
async def start_update_list(message: types.Message, state: FSMContext):
    if message.text in names_list:
        async with state.proxy() as data:
            result = data
        if "names_list" in result:
            update_list = result["names_list"].copy()
            try:
                update_list.remove(message.text)
            except ValueError as error:
                print(error)
            async with state.proxy() as data:
                data["names_list"] = update_list
        else:
            new_name_list = names_list
            try:
                new_name_list.remove(message.text)
            except ValueError as error:
                print(error)
            async with state.proxy() as data:
                data["names_list"] = new_name_list
        async with state.proxy() as data:
            res = data["names_list"]
        await bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            reply_markup=keyboards.step_keyboard,
            parse_mode=types.ParseMode.MARKDOWN, )
        async with state.proxy() as data:
            res = data["names_list"]
        await UpdateList.update.set()
    elif message.text == "–£–¥–∞–ª–∏—Ç—å –µ—â—ë":
        async with state.proxy() as data:
            res = data["names_list"]
        await bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–º—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            reply_markup=create_keyboard_name_list(res),
            parse_mode=types.ParseMode.MARKDOWN,
        )
        await UpdateList.update.set()
    elif message.text == "–ó–∞–∫–æ–Ω—á–∏—Ç—å":
        async with state.proxy() as data:
            res = data["names_list"]
        sp = list.copy(res)
        sp_random = [sp.pop(random.randrange(len(sp))) for _ in range(len(sp))]
        await bot.send_message(message.chat.id, f" {get_random_smiley()} \n ".join(sp_random))
        await bot.send_message(message.chat.id, get_random_wish(), reply_markup=keyboards.main_menu, )
        await bot.send_message(message.chat.id, get_random_smiley())

        await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
